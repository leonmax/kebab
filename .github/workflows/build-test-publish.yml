name: Publish kebab to PyPI and TestPyPI

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - run: python -m pip install black flake8 isort
      - run: |
          flake8 .
          black . --check
          isort .
  build-n-test:
    needs: linting
    strategy:
      fail-fast: true
      matrix:
        python: [3.7, 3.8, 3.9, 3.10, 3.11]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      # https://github.com/marketplace/actions/install-poetry-action
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies with poetry
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi
      - name: Run flake8 and pytest
        run: |
          source .venv/bin/activate
          flake8
          pytest --cov=kebab tests/
          coverage report
      - name: Publish
        run: |
          export VERSION=`grep -e "^version" pyproject.toml | tr -d '[" ]' | cut -d= -f2`
          test ${{ env.GITHUB_REF }} = "$VERSION"
          poetry publish --build
